#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#include <map>
#include <fstream>
#include <algorithm>
#include <string>
#include <cstdlib>
#include <ctime>
#include <cctype>

using namespace std;


struct Tiket {
    string nama, kodeKursi, film, hari, jadwal, metodeBayar, studio;
    int harga;
};


queue<Tiket> antrianTiket;
stack<Tiket> pembatalan;
vector<Tiket> daftarTiket;
vector<Tiket> transaksiHariIni;
map<string, int> poinPelanggan;
map<string, string> studioPerNama;


const int ROWS = 5;
const int COLS = 10;
bool kursiTerisi[ROWS][COLS] = { false };


vector<string> daftarFilm = {
    "Jumbo", "Ada Apa Dengan Cinta", "Waktu Maghrib", "KKN Desa Penari",
    "Ipar Adalah Maut", "Agak Laen", "Pengabdi Setan", "Dilan 1990"
};

vector<string> daftarStudio = { "Studio 1", "Studio 2", "Studio 3", "Studio 4" };


bool konversiKodeKursi(const string& kode, int& row, int& col) {
    if (kode.length() < 2 || kode.length() > 3) return false;
    row = toupper(kode[0]) - 'A';
    try {
        col = stoi(kode.substr(1)) - 1;
    } catch (...) {
        return false;
    }
    return row >= 0 && row < ROWS && col >= 0 && col < COLS;
}


void tampilkanKursi() {
    cout << "\nTata Letak Kursi (XX = Terisi):\n";
    for (int i = 0; i < ROWS; ++i) {
        for (int j = 0; j < COLS; ++j) {
            if (kursiTerisi[i][j]) cout << "[XX] ";
            else cout << "[" << char('A' + i) << j + 1 << "] ";
        }
        cout << endl;
    }
}


void cetakTiket(const Tiket& t) {
    cout << "\n===== Tiket Bioskop =====\n";
    cout << "Nama   : " << t.nama << endl;
    cout << "Film   : " << t.film << endl;
    cout << "Studio : " << t.studio << endl;
    cout << "Hari   : " << t.hari << endl;
    cout << "Jadwal : " << t.jadwal << endl;
    cout << "Kursi  : " << t.kodeKursi << endl;
    cout << "Harga  : Rp" << t.harga << endl;
    cout << "Bayar  : " << t.metodeBayar << endl;
    cout << "=========================\n";
}


int hitungHarga(const string& hari, const string& jadwal) {
    bool weekend = (hari == "Sabtu" || hari == "Minggu");
    int harga = weekend ? 60000 : 50000;
    try {
        if (jadwal.length() >= 2) {
            int jam = stoi(jadwal.substr(0, 2));
            if (jam >= 18) harga += 10000;
        }
    } catch (...) {}
    return harga;
}


void tambahPoin(const string& nama) {
    poinPelanggan[nama] += 10;
    cout << "Poin " << nama << ": " << poinPelanggan[nama] << " poin\n";
}


bool isHariKamis(const string& hari) {
    string h = hari;
    transform(h.begin(), h.end(), h.begin(), ::tolower);
    return h == "kamis";
}


void simpanTransaksiKeFile() {
    ofstream file("transaksi.txt", ios::app);
    for (const auto& t : transaksiHariIni) {
        file << t.nama << "," << t.kodeKursi << "," << t.film << "," << t.hari << "," << t.jadwal << "," << t.harga << "," << t.metodeBayar << "," << t.studio << endl;
    }
    file.close();
    cout << "Transaksi disimpan ke file.\n";
}


void tampilkanPoinTertinggi() {
    cout << "\n=== Leaderboard Poin ===\n";
    for (auto& p : poinPelanggan) {
        cout << p.first << ": " << p.second << " poin\n";
    }
}


void tampilkanPembatalan() {
    stack<Tiket> temp = pembatalan;
    cout << "\n=== Riwayat Pembatalan Tiket ===\n";
    while (!temp.empty()) {
        cetakTiket(temp.top());
        temp.pop();
    }
}


void tambahPemesanan() {
    string nama, hari, jadwal, metode;
    int jumlah;
    srand(time(0));

    cin.ignore();
    cout << "\nMasukkan nama: "; getline(cin, nama);

    cout << "Pilih film:\n";
    for (size_t i = 0; i < daftarFilm.size(); ++i)
        cout << i + 1 << ". " << daftarFilm[i] << endl;

    int pilihanFilm;
    while (!(cin >> pilihanFilm) || pilihanFilm < 1 || pilihanFilm > static_cast<int>(daftarFilm.size())) {
        cout << "Masukkan angka film yang valid: ";
        cin.clear(); cin.ignore(1000, '\n');
    }
    string film = daftarFilm[pilihanFilm - 1];

    cin.ignore();
    cout << "Masukkan hari: "; getline(cin, hari);
    do {
        cout << "Masukkan jadwal (contoh 19:00): ";
        getline(cin, jadwal);
        if (jadwal.length() < 5 || jadwal[2] != ':' || !isdigit(jadwal[0]) || !isdigit(jadwal[1])) {
            cout << "Format salah! Jadwal harus seperti 19:00.\n";
            continue;
        }
        break;
    } while (true);

    cout << "Pilih metode pembayaran (tunai/debit/QRIS): "; getline(cin, metode);

    cout << "Jumlah tiket: ";
    while (!(cin >> jumlah) || jumlah <= 0) {
        cout << "Jumlah tiket tidak valid: ";
        cin.clear(); cin.ignore(1000, '\n');
    }

    vector<Tiket> tiketUser;
    int totalHarga = 0;

    string studio;
    if (studioPerNama.count(nama)) studio = studioPerNama[nama];
    else studio = studioPerNama[nama] = daftarStudio[rand() % daftarStudio.size()];

    int tiketGratis = 0;
    if (isHariKamis(hari) && jumlah >= 3) tiketGratis = jumlah / 3;

    for (int i = 0; i < jumlah; i++) {
        tampilkanKursi();
        cout << "Pilih kursi ke-" << (i + 1) << ": ";
        string kode; cin >> kode;
        int row, col;
        if (!konversiKodeKursi(kode, row, col) || kursiTerisi[row][col]) {
            cout << "Kursi tidak valid/terisi. Ulangi.\n"; i--; continue;
        }
        kursiTerisi[row][col] = true;
        int harga = hitungHarga(hari, jadwal);
        if (tiketGratis > 0) { harga = 0; tiketGratis--; cout << "\U0001F389 Promo Kamis: Tiket ini GRATIS!\n"; }
        totalHarga += harga;
        Tiket t = {nama, kode, film, hari, jadwal, metode, studio, harga};
        antrianTiket.push(t);
        daftarTiket.push_back(t);
        transaksiHariIni.push_back(t);
        tiketUser.push_back(t);
        tambahPoin(nama);
    }

    for (const auto& t : tiketUser) cetakTiket(t);
    cout << "\nTOTAL PEMBAYARAN: Rp" << totalHarga << endl;
    cout << "=========================\n";
    simpanTransaksiKeFile();
}


void tampilkanTransaksiHariIni() {
    int total = 0;
    cout << "\n=== Transaksi Hari Ini ===\n";
    for (const auto& t : transaksiHariIni) {
        cout << "Nama: " << t.nama
             << " | Kursi: " << t.kodeKursi
             << " | Film: " << t.film
             << " | Studio: " << t.studio
             << " | Jadwal: " << t.jadwal
             << " | Harga: Rp" << t.harga
             << " | Bayar: " << t.metodeBayar << endl;
        total += t.harga;
    }
    cout << "Total tiket terjual: " << transaksiHariIni.size() << endl;
    cout << "Total pendapatan   : Rp" << total << endl;
}


void updateTiket() {
    string nama, kursi;
    cin.ignore();
    cout << "\nMasukkan nama: "; getline(cin, nama);
    cout << "Masukkan kode kursi yang ingin di-update: "; getline(cin, kursi);
    bool ditemukan = false;
    for (auto& t : daftarTiket) {
        if (t.nama == nama && t.kodeKursi == kursi) {
            cout << "Metode lama: " << t.metodeBayar << endl;
            cout << "Masukkan metode baru: "; getline(cin, t.metodeBayar);
            cout << "Metode pembayaran berhasil diperbarui!\n";
            ditemukan = true;
            break;
        }
    }
    if (!ditemukan) cout << "Tiket tidak ditemukan.\n";
}


void hapusTiket() {
    string nama, kursi;
    cin.ignore();
    cout << "\nMasukkan nama: "; getline(cin, nama);
    cout << "Masukkan kode kursi yang ingin dihapus: "; getline(cin, kursi);
    bool ditemukan = false;
    for (auto it = daftarTiket.begin(); it != daftarTiket.end(); ++it) {
        if (it->nama == nama && it->kodeKursi == kursi) {
            pembatalan.push(*it);
            int row = toupper(kursi[0]) - 'A';
            int col = stoi(kursi.substr(1)) - 1;
            kursiTerisi[row][col] = false;
            daftarTiket.erase(it);
            cout << "Tiket berhasil dibatalkan.\n";
            ditemukan = true;
            break;
        }
    }
    if (!ditemukan) cout << "Tiket tidak ditemukan.\n";
}


void cariTiket() {
    string nama;
    cin.ignore();
    cout << "\nMasukkan nama yang ingin dicari: "; getline(cin, nama);
    bool ditemukan = false;
    for (const auto& t : daftarTiket) {
        if (t.nama == nama) { cetakTiket(t); ditemukan = true; }
    }
    if (!ditemukan) cout << "Tiket tidak ditemukan.\n";
}


void urutkanTiketBerdasarkanHarga() {
    vector<Tiket> copyTiket = daftarTiket;
    sort(copyTiket.begin(), copyTiket.end(), [](const Tiket& a, const Tiket& b) {
        return a.harga < b.harga;
    });
    cout << "\n=== Tiket Diurutkan berdasarkan Harga ===\n";
    for (const auto& t : copyTiket) cetakTiket(t);
}




